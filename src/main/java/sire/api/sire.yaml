swagger: "2.0"
info:
  description: "SIRE (truSted verIfieR sErvice) is a fault and intrusion-tolerant coordination and attestation service for IoT. Here you can create, delete and update its extensions and policies."
  version: "0.1.0"
  title: "SIRE"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "sire.swagger.io"
basePath: "/v2"
tags:
- name: "policies"
  description: "Methods to configure the policies related to the Attestation Service"
- name: "extensions"
  description: "Methods to configure the extensions related to the Coordination Service"
schemes:
- "https"
paths:
  /extension/{extensionName}:
    post:
      tags:
      - "extensions"
      summary: "Upload extension to coordination service."
      description: ""
      operationId: "extensionUpload"
      produces:
      - "application/json"
      parameters:
      - name: "extensionName"
        in: "path"
        description: "Alias of extension to upload into the coordination service."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Extension uploaded to coordination service."
        required: true
        schema:
          $ref: "#/definitions/Extension"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid Extension"
    put:
      tags:
      - "extensions"
      summary: "Update extension in coordination service."
      description: ""
      operationId: "extensionUpdate"
      produces:
      - "application/json"
      parameters:
      - name: "extensionName"
        in: "path"
        description: "Alias of extension to update in the coordination service."
        required: true
        type: "string"
      - name: "extension"
        in: "body"
        description: "Extension to update in the coordination service."
        required: true
        schema:
          $ref: "#/definitions/Extension"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid Extension"
        "404":
          description: "Extension not found"
    delete:
      tags:
      - "extensions"
      summary: "Delete extension from coordination service."
      description: ""
      operationId: "extensionDelete"
      produces:
      - "application/json"
      parameters:
      - name: "extensionName"
        in: "path"
        description: "Alias of extension to delete from coordination service."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid Extension"
        "404":
          description: "Extension not found"
    get:
      tags:
      - "extensions"
      summary: "Get extension from coordination service."
      description: ""
      operationId: "extensionGet"
      produces:
      - "application/json"
      parameters:
      - name: "extensionName"
        in: "path"
        description: "Alias of extension to get from the coordination service."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Extension"
        "400":
          description: "Invalid Id"
        "404":
          description: "Extension not found"
  /extension:
    get:
      tags:
      - "extensions"
      summary: "Get all extensions from coordination service"
      description: ""
      operationId: "getAllExtensions"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Extension"
        "404":
          description: "No extensions found"
  /policy/{policyName}:
    post:
      tags:
      - "policies"
      summary: "Upload policy to attestation service."
      description: ""
      operationId: "addPolicy"
      produces:
      - "application/json"
      parameters:
      - name: "policyName"
        in: "path"
        description: "Alias of policy to upload into the attestation service."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Policy uploaded to attestation service."
        required: true
        schema:
          $ref: "#/definitions/Policy"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid Policy"
    put:
      tags:
      - "policies"
      summary: "Update policy in attestation service."
      description: ""
      operationId: "policyUpdate"
      produces:
      - "application/json"
      parameters:
      - name: "policyName"
        in: "path"
        description: "Alias of policy to update in the attestation service."
        required: true
        type: "string"
      - name: "policy"
        in: "body"
        description: "Policy to update in the attestation service."
        required: true
        schema:
          $ref: "#/definitions/Policy"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid Policy"
        "404":
          description: "Policy not found"
    delete:
      tags:
      - "policies"
      summary: "Delete policy from attestation service."
      description: ""
      operationId: "policyDelete"
      produces:
      - "application/json"
      parameters:
      - name: "policyName"
        in: "path"
        description: "Alias of policy to delete from attestation service."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Invalid Policy"
        "404":
          description: "Policy not found"
    get:
      tags:
      - "policies"
      summary: "Get policy from attestation service."
      description: ""
      operationId: "policyGet"
      produces:
      - "application/json"
      parameters:
      - name: "policyName"
        in: "path"
        description: "Alias of policy to get from the attestation service."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Policy"
        "400":
          description: "Invalid Id"
        "404":
          description: "Policy not found"
  /policies:
    get:
      tags:
      - "policies"
      summary: "Get all policies from attestation service"
      description: ""
      operationId: "getAllPolicies"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Policy"
        "404":
          description: "No policies found"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  device_auth:
    type: "oauth2"
    authorizationUrl: "http://device.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:device: "modify device"
      read:device: "read device"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Extension:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      code:
        type: "string"
        #TODO
    xml:
      name: "Extension"
  Policy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      rule:
        type: "object"
    xml:
      name: "Policy"
    example:
      id: 1
      name: "examplePolicy"
      rule: >-
        version=1.0;
        authorizationrules
        {
        c:[type="secureBootEnabled", issuer=="AttestationService"]=> permit()
        };

        issuancerules
        {
        c:[type="secureBootEnabled", issuer=="AttestationService"]=> issue(claim=c)
        c:[type="notSafeMode", issuer=="AttestationService"]=> issue(claim=c)
        };
        
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"