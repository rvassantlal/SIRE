syntax= "proto3";

package sire.messages;

//Complementary
message ProtoSchnorr {
  bytes sigma = 1;
  bytes signPubKey = 2;
  bytes randomPubKey = 3;
}

message ProtoEvidence {
  string version = 1;
  bytes claim = 2;
  bytes servicePubKey = 3;
}

message ProtoMQTTEvidence{
  int32 securityVersion = 1;
  int32 productId = 2;
  bytes claim = 3;
  string nonce = 4;
  bytes mrEnclave = 5;
  bytes mrSigner = 6;
}

message ProxyMessage {
  enum Operation {
    //----------ATTESTATION-----------
    ATTEST_GET_PUBLIC_KEY = 0;
    ATTEST_TIMESTAMP = 1;
    ATTEST_TIMESTAMP_MQTT = 2;
    //--------------MAP--------------
    MAP_PUT = 3;
    MAP_DELETE = 4;
    MAP_GET = 5;
    MAP_LIST = 6;
    MAP_CAS = 7;
    //-----------MEMBERSHIP-----------
    MEMBERSHIP_JOIN = 8;
    MEMBERSHIP_JOIN_MQTT = 9;
    MEMBERSHIP_LEAVE = 10;
    MEMBERSHIP_VIEW = 11;
    MEMBERSHIP_PING = 12;
    //-----------EXTENSION------------
    EXTENSION_ADD = 13;
    EXTENSION_REMOVE = 14;
    EXTENSION_GET = 15;
    //-------------POLICY-------------
    POLICY_ADD = 16;
    POLICY_REMOVE = 17;
    POLICY_GET = 18;
    //-----------TIMESTAMP------------
    TIMESTAMP_GET = 19;
  }
  Operation operation = 1;

  //=========JOIN REQUEST===========//
  ProtoEvidence evidence = 2;
  bytes timestamp = 3;
  ProtoSchnorr signature = 4;

  string key = 5;
  bytes value = 6; //also serves as newData
  bytes oldData = 7;

  string deviceId = 8;
  string appId = 9;

  string code = 10;

  message ProtoPolicy {
    string policy = 1;
    bool type = 2; //false = logic expression, true = script
  }

  ProtoPolicy policy = 11;

  //========INITIAL REQUEST==========//
  bytes pubKey = 12;
  ProtoMQTTEvidence mqttEvidence = 13;

  //bytes sigBytes = 13;
}

message ProxyResponse {
  enum ResponseType {
    MAP_GET = 0;
    MAP_LIST = 1;
    VIEW = 2;
    EXTENSION_GET = 3;
    POLICY_GET = 4;
    PREJOIN = 5;
    PREJOIN_MQTT = 6;
    JOIN = 7;
    JOIN_MQTT = 8;
  }
  ResponseType type = 1;
  repeated bytes list = 2;
  bytes value = 3;
  message ProtoDeviceContext {
    string deviceId = 1;
  }
  repeated ProtoDeviceContext members = 4;
  string extPolicy = 5;

  //======TIMESTAMP RESPONSE========//
  ProtoSchnorr sign = 6;
  bytes timestamp = 7; //Can also be used for join response
  bytes pubKey = 8;
  bytes hash = 9;
  bool isSuccess = 10;
}